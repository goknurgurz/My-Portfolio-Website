

  
<div class="logReg">
  <!-- Kayıt sayfasında arka plan veya dekoratif bir görsel -->
  <img src="/img/background/register.jpg" alt="register">

  <!-- Kayıt formu (id="register" ile JavaScript’te yakalayabiliyoruz) -->
  <form id="register">

    <!-- Kullanıcıdan email alınan alan -->
    <div class="formGroup">
      <input name="email" required>
      <span>Email *</span> <!-- Girdi etiketini belirtmek için -->
    </div>

    <!-- Kullanıcıdan kullanıcı adı (username) alınan alan -->
    <div class="formGroup">
      <input name="username" required>
      <span>Username *</span>
    </div>

    <!-- Kullanıcıdan şifre alınan alan -->
    <div class="formGroup">
      <input name="password"> <!-- Dilersen type="password" yaparak gizleyebilirsin -->
      <span>Password *</span>
    </div>

    <!-- Giriş linki ve buton grubu -->
    <div class="btnGroup">
      <!-- Zaten hesabın var mı? linki -->
      <a href="/login">Do you have an account?</a>

      <!-- Formu gönderen buton -->
      <button type="submit">Register</button>
    </div>
  </form>
</div>


<script>
  // Register formunu DOM'dan alıyoruz
  const register = document.getElementById('register');

  // Form gönderildiğinde tetiklenecek olan event
  register.addEventListener('submit', (e) => {
    e.preventDefault(); // Sayfanın yenilenmesini engeller

    // Form verilerini alır ve URL formatına çevirir (x-www-form-urlencoded için)
    const formData = new URLSearchParams(new FormData(e.target));

    // Form verilerini sunucuya POST ile gönderiyoruz
    fetch("/register", {
      method: 'POST', // POST methoduyla veri gönderimi
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded' // Sunucu bu formatı bekliyor
      },
      body: formData // Gönderilecek veri (email, username, password)
    })
    .then(response => {
      return response.json(); // JSON formatında cevap alıyoruz
    })
    .then(res => {
      console.log(res); // Sunucudan gelen cevabı konsola yaz

      // Eğer işlem başarılıysa (sunucu 'case: true' gönderirse)
      if (res.case) {
        register.reset(); // Formu temizle
        alert(res.message); // Kullanıcıya bilgi mesajı göster
         window.location.href = "/"; // Kullanıcıyı login sayfasına yönlendir
      } else {
        alert(res.message); // Hata mesajı göster
      }
    })
    .catch(err => {
      console.error("Bir hata oluştu:", err); // Fetch sırasında oluşan hatayı yakala
      alert("Bir hata oluştu. Lütfen tekrar deneyin.");
    });
  });
</script>

{{!-- <script>
      const register = document.getElementById('register');
register.addEventListener('submit', (e) => {
    e.preventDefault();

    const formData = new URLSearchParams(new FormData(e.target));

    fetch("/register", {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: formData
    })
    .then(response => {return response.json()
})
    .then(res => {
        console.log(res);
    });

});

   </script>
   
 --}}